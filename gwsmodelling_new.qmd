---
title: "GWS Modelling: Parametric Testing"
author:
  - name: Khant Min Naing
  - name: Ann Mei Yi Victoria Grace
date: 01-07-2024 
date-modified: "last-modified"
categories:
  - R
  - sf
  - gwmodel
output:
  distill::distill_article:
    code_folding: false
    toc: true
    self_contained: false
---

To develop a landslide susceptibility methodology framework, we will explore and calibrate different statistical and machine learning models. This page focuses on statistical models first.


# 1.0 Import Packages

```{r}
pacman::p_load(sp, sf, st, spdep, raster, spatstat, tmap, devtools,vtable,ggplot2,egg, corrplot, patchwork, ggstats, ggstatsplot, GWmodel, tidyverse, gtsummary,vtable, sjPlot, sjmisc, sjlabelled, tableHTML, olsrr, car, blorr,ISLR, klaR)
```


# 2.0 Import Data

```{r}
valtellina <- read_sf(dsn = "data/vector", layer = "valtellina")
train_grids_v4 <- read.csv("data/aspatial/train_grid_v4.csv")
```


```{r}
train_grid_v4.sf <- st_as_sf(train_grids_v4,
                            coords = c("X", "Y"))
train_grid_v4.sf <- st_set_crs(train_grid_v4.sf, 32632) 
```


# 3.0 Exploratory Spatial Data Analysis (ESDA)

To calculate the summary statistics of `landslide_train` data frame, we use `st()`.

```{r}
st(train_grids_v4)
```

Next, we will create atrellis plot by using `ggarrange()` of [**ggpubr**](https://cran.r-project.org/web/packages/ggpubr/) package. In this way, we can see the distribution plots of different parameters at the same time.4.1 Correlation Matrix Using Corrplot

Before building a logistic regression model, it is important to ensure that the indepdent variables used are **not highly correlated** to each other. If these highly correlated independent variables are used in building a regression model by mistake, the quality of the model will be compromised. This phenomenon is known as **multicollinearity** in statistics.

Correlation matrix is commonly used to visualise the relationships between the independent variables. In this section, the [**corrplot**](https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html) package will be used to display the correlation matrix of the independent variables in *condo_resale* data frame.

```{r}
#| fig-width: 10

corrplot(cor(train_grids_v4[, 6:29]), diag = FALSE, order = "AOE",
         col=colorRampPalette(c("#50a8b4","#e4c838","#be804f"))(10),
         tl.pos = "td", tl.cex = 0.5,tl.col = "black", number.cex = 0.5, method = "number", type = "upper")

corrplot(cor(train_grids_v4[,6:29]), diag = FALSE, order = "AOE",
         col=colorRampPalette(c("#50a8b4","#ffffdd","#be804f"))(10),
         tl.pos = "td", tl.cex = 0.5,tl.col = "black", number.cex = 0.5, method = "ellipse", type = "upper")
```

Matrix reorder is very important for mining the hiden structure and patter in the matrix. There are four methods in corrplot (parameter order), named "AOE", "FPC", "hclust", "alphabet". In the code chunk above, AOE order is used. It orders the variables by using the *angular order of the eigenvectors* method suggested by [Michael Friendly](https://www.datavis.ca/papers/corrgram.pdf).

### 3.1 Correlation Matrix Using ggstats

```{r}
#| fig-width: 10

set.seed(123)
## producing the correlation matrix
ggcorrmat(
  data = train_grids_v4[, 6:29],  
          matrix.type = "upper",
  type = "parametric",
  tr = 0.2,
  partial = FALSE,
  k = 2L,
  sig.level = 0.05,
  conf.level = 0.95,
  bf.prior = 0.707,
  ggcorrplot.args = list(
     tl.cex = 10,
     pch.cex = 5,
     lab_size = 3
  )) + ## modification outside `{ggstatsplot}` using `{ggplot2}` functions
  ggplot2::theme(
    axis.text.x = ggplot2::element_text(
      margin = ggplot2::margin(t = 0.15, r = 0.15, b = 0.15, l = 0.15, unit = "cm")
    )
  )
```


# 4.0 Multiple Logistic Regression

The `glm` function fits generalized linear models, a class of models that includes logistic regression. The syntax of the `glm` function is similar to that of `lm`, except that we must pass the argument `family = binomial` in order to tell R to run a logistic regression rather than some other type of generalized linear model.

## 4.1 Logistic Regression Model 1

Under general logistic regression, all variables are considered first.

```{r}
landslide.lr <- glm(Landslide ~ Elevation + Slope_Angle + Aspect_North + Aspect_NorthEast + Aspect_East+Aspect_SouthEast+Aspect_South + Aspect_SouthWest +Aspect_West + Profile_Curvature +Plan_Curvature + Lithology_Metamorphic+Lithology_Sedimentary + Lithology_Plutonic+Lithology_Unconsolidated + Proximity_Settlement+Proximity_Stream+Proximity_Road+Proximity_Fault+Landuse_Vegetation+Precipitation+TWI+SPI+STI, family = "binomial", data = train_grids_v4)
```

```{r}
summary(landslide.lr)
```

```{r}
100*with(summary(landslide.lr), 1 - deviance/null.deviance)
confint(landslide.lr)
```
```{r}
vif(landslide.lr)
```

### 4.1.1 Stepwise Selection

For the initial/ first cut model, all the independent variables are put into the model. Our goal is to include a limited number of independent variables (5-15) which are all significant, without sacrificing too much on the model performance. The rationale behind including not too many variables is that the model would be overfitted and would become unstable when tested on the validation sample. The variable reduction is done using forward or backward or stepwise variable selection procedures. We will use `blr_step_aic_both()` to shortlist predictors for our model.

```{r}
blr_step_aic_both(landslide.lr)
```

::: callout-note
#### Stepwise Selection Result
16 explanatory variables have been selected
:::

Plotting the Akaike Information Criterion curve as it is the main threshold.

```{r}
landslide.lr %>%
  blr_step_aic_both() %>%
  plot()
```

::: callout-note
#### Observation
In our first stepwise selection, `Slope_Angle` has the highest AIC value followed by `Profile_Curvature`.
:::

## Model Update

```{r}
landslide.lr_modified <- glm(Landslide ~ Slope_Angle + Aspect_SouthEast + Aspect_NorthEast + Aspect_South + Aspect_East + Profile_Curvature +Plan_Curvature +Lithology_Metamorphic+Lithology_Unconsolidated+ Lithology_Sedimentary+Proximity_Stream+Landuse_Vegetation+TWI+SPI, family = "binomial", data = train_grids_v4)
```



```{r}

```



