{
  "hash": "dd5bdf16d4ed65076e4934bcf305a71c",
  "result": {
    "markdown": "---\ntitle: \"Geographically Weighted Regression\"\nauthor:\n  - name: Khant Min Naing\ndate: 01-10-2024\ndate-modified: \"last-modified\"\ncategories:\n  - R\n  - sf\n  - GWmodel\n  - ggplot2\n  \noutput:\n  distill::distill_article:\n    code_folding: false\n    toc: true\n    self_contained: false\n---\n\n\n## 1.0 Install and Load Necessary Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sp)\nlibrary(spdep)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: spData\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sf\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(tmap)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'tmap'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:datasets':\n\n    rivers\n```\n:::\n\n```{.r .cell-code}\nlibrary(spgwr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNOTE: This package does not constitute approval of GWR\nas a method of spatial analysis; see example(gwr)\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(ggplot2)\nlibrary(terra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nterra 1.7.55\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'tidyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:terra':\n\n    extract\n```\n:::\n\n```{.r .cell-code}\nlibrary(tmap)\n```\n:::\n\n\n## 2.0 Import Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"~/IS485-Landslide/data\")\ndownload.file(url = \"https://raw.githubusercontent.com/crd230/data/master/phil_tracts.zip\", destfile = \"phil_tracts.zip\")\nunzip(zipfile = \"phil_tracts.zip\")\n\nphilly <- st_read(\"phil_tracts.shp\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `phil_tracts' from data source \n  `/Users/khantminnaing/IS485-Landslide/data/phil_tracts.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 376 features and 25 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 476461.9 ymin: 4413070 xmax: 503772 ymax: 4443067\nProjected CRS: UTM_Zone_18_Northern_Hemisphere\n```\n:::\n\n```{.r .cell-code}\nphilly_df <- as.data.frame(philly,xy=TRUE)\nhead(philly_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  OBJECTID STATEFP10 COUNTYFP10 TRACTCE10     GEOID10 totpop mhhinc mrent\n1        1        42        101    009400 42101009400   4123  18408   540\n2        2        42        101    009500 42101009500   3065  27708   782\n3        3        42        101    009600 42101009600   4311  24402   893\n4        4        42        101    013800 42101013800   2118  28534   865\n5        5        42        101    013900 42101013900   2960  14314   576\n6        6        42        101    014000 42101014000   3042  24474   891\n   mhval  pnhwhite    pnhblk  pnhasian     phisp      pcol       ppa    punemp\n1  65200 0.0070337 0.9391220 0.0000000 0.0097017 0.0912000 0.1318619 0.1923559\n2  58800 0.0084829 0.9197390 0.0000000 0.0450245 0.1418440 0.1465721 0.1231190\n3  71200 0.0192531 0.9359778 0.0071909 0.0269079 0.0880030 0.1180124 0.1520468\n4  79600 0.1123702 0.7828140 0.0000000 0.0722380 0.1752434 0.0970516 0.1584821\n5 286400 0.1405405 0.7952703 0.0033784 0.0540541 0.1293188 0.1628114 0.1344455\n6 175000 0.2652860 0.5782380 0.0667324 0.0404339 0.2966967 0.0726795 0.1172087\n       pvac     phnew      ph70      ppov    usarea     popd   lmhhinc     lpop\n1 0.1426492 0.0000000 0.0422125 0.4360902 134.19121 29119.49  9.820541 8.324579\n2 0.2088529 0.0000000 0.0504988 0.3686786 178.56621 24877.52 10.229476 8.028129\n3 0.2218463 0.0000000 0.0183664 0.3852934 178.94036 27550.42 10.102420 8.369157\n4 0.2620127 0.0000000 0.0743427 0.2945402 273.22482 16074.73 10.258852 7.658700\n5 0.1624441 0.0000000 0.1907601 0.4765906  87.41617 13618.52  9.568993 7.993282\n6 0.2762991 0.0152091 0.0532319 0.4602235  94.22361 17914.26 10.105367 8.020599\n    lmhval                       geometry\n1 11.08521 MULTIPOLYGON (((480418.7 44...\n2 10.98190 MULTIPOLYGON (((479900.6 44...\n3 11.17325 MULTIPOLYGON (((479209.6 44...\n4 11.28477 MULTIPOLYGON (((485193.2 44...\n5 12.56514 MULTIPOLYGON (((485216.9 44...\n6 12.07254 MULTIPOLYGON (((486216.5 44...\n```\n:::\n\n```{.r .cell-code}\nggplot(data = philly) +\n  geom_sf()+\n  coord_sf(expand=FALSE)+\n  labs(x='Longitude',y='Latitude',\n       title=\"Study Area\",\n       subtitle='Philidelphia') +\n  cowplot::theme_cowplot()+\n  theme(panel.grid.major = element_line(color = gray(.5), linetype = 'dashed',linewidth = 0.1),\n        panel.grid.minor = element_blank(),\n        panel.background = element_rect(fill=NA,color = 'black'),\n        panel.ontop = TRUE,\n        axis.title.x = element_text(size = 12), \n        axis.title.y = element_text(size = 12),\n        axis.text.x = element_text(size = 8),\n        axis.text.y = element_text(size = 8))\n```\n\n::: {.cell-output-display}\n![](gwr_test_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## 3.0 Ordinary Least Squares Regression\n\nWe want to examine the relationship between neighborhood characteristics and major building code violation rates. Let's run a basic **Ordinary Least Squares (OLS) regression** of number of major building code violations per area in square miles (usarea) on the following independent variables: Log median household income `lmhinc`, log population size `lpop`, percent non-Hispanic black `pnhblk`, percent Hispanic, the unemployment rate `punemp`, percent vacant units `pvac`, percent of housing units built before 1970 `ph70`, percent of housing units built 2014 `phnew` and after `phisp`, and log median housing value `lmhval`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit.ols<-glm(usarea~lmhhinc + lpop + pnhblk +punemp +pvac\n             +ph70 +lmhval + phnew + phisp, data = philly)\nsummary(fit.ols)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nglm(formula = usarea ~ lmhhinc + lpop + pnhblk + punemp + pvac + \n    ph70 + lmhval + phnew + phisp, data = philly)\n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  534.491    164.270   3.254  0.00124 ** \nlmhhinc        2.462     12.176   0.202  0.83990    \nlpop          -1.344      6.338  -0.212  0.83216    \npnhblk        21.158     18.077   1.170  0.24260    \npunemp        -5.097     63.645  -0.080  0.93622    \npvac         371.699     58.427   6.362 5.96e-10 ***\nph70         -79.691     35.535  -2.243  0.02552 *  \nlmhval       -45.668     10.458  -4.367 1.64e-05 ***\nphnew         17.958    319.042   0.056  0.95514    \nphisp        -56.308     30.695  -1.834  0.06741 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for gaussian family taken to be 4829.927)\n\n    Null deviance: 2938287  on 375  degrees of freedom\nResidual deviance: 1767753  on 366  degrees of freedom\nAIC: 4268.4\n\nNumber of Fisher Scoring iterations: 2\n```\n:::\n:::\n\n\nWe find that the percent of vacant units is positively associated with the number of major building code violations per square mile, whereas the percent of units built before 1970 and log median housing value are negatively associated. This model assumes spatial homogeneity in these relationships. Let's examine whether this assumption of homogeneity is appropriate by running a GWR.\n\n## 4.0 Geographically Weighted Regression\n\nGWR is an outgrowth of ordinary least squares regression (OLS); and adds a level of modeling sophistication by allowing the relationships between the independent and dependent variables to vary by locality. Note that the basic OLS regression model above is just a special case of the GWR model where the coefficients are constant over space. The parameters in the GWR are estimated by weighted least squares. The weighting matrix is a diagonal matrix, with each diagonal element wij being a function of the location of the observation. The role of the weight matrix is to give more value to observations that are close to i , as it is assumed that observations that are close will influence each other more than those that are far away (Tobler's Law).\n\nThere are three major decisions to make when running a GWR: (1) the kernel density function assigning weights w~ij~ , (2) the bandwidth h of the function, which determines the degree of distance decay, and (3) who to count as neighbors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphilly.sp <- as(philly, \"Spatial\")\n```\n:::\n\n\n### 4.1 Choosing Bandwidth\n\nIn order to calculate an optimal bandwidth in R, use the command gwr.sel(). The default method is cross-validation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.b1<-gwr.sel(usarea ~ lmhhinc+lpop+pnhblk+punemp+pvac  +ph70 +lmhval + phnew + phisp, philly.sp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 14224.76 CV score: 1845565 \nBandwidth: 22993.17 CV score: 1860162 \nBandwidth: 8805.59 CV score: 1818722 \nBandwidth: 5456.356 CV score: 1750890 \nBandwidth: 3386.415 CV score: 1610987 \nBandwidth: 2107.121 CV score: 1497008 \nBandwidth: 1316.474 CV score: 1412725 \nBandwidth: 827.8277 CV score: 1787166 \nBandwidth: 1618.475 CV score: 1446078 \nBandwidth: 1129.828 CV score: 1448167 \nBandwidth: 1377.629 CV score: 1414671 \nBandwidth: 1298.316 CV score: 1413143 \nBandwidth: 1324.036 CV score: 1412698 \nBandwidth: 1322.62 CV score: 1412697 \nBandwidth: 1322.714 CV score: 1412696 \nBandwidth: 1322.708 CV score: 1412696 \nBandwidth: 1322.708 CV score: 1412696 \nBandwidth: 1322.708 CV score: 1412696 \nBandwidth: 1322.708 CV score: 1412696 \n```\n:::\n\n```{.r .cell-code}\ngwr.b1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1322.708\n```\n:::\n:::\n\n\nThis is the distance (in meters, because our data are projected in a system measured in meters), which the weighting function will search, and include all observations within this radius.\n\nPlug the bandwidth into the function gwr(), which runs the GWR model, using the argument bandwidth.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.fit1<-gwr(usarea ~ lmhhinc   + lpop + pnhblk + punemp + pvac  + ph70 + lmhval + \n     phnew + phisp, data = philly.sp, bandwidth = gwr.b1, se.fit=T, hatmatrix=T)\ngwr.fit1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\ngwr(formula = usarea ~ lmhhinc + lpop + pnhblk + punemp + pvac + \n    ph70 + lmhval + phnew + phisp, data = philly.sp, bandwidth = gwr.b1, \n    hatmatrix = T, se.fit = T)\nKernel function: gwr.Gauss \nFixed bandwidth: 1322.708 \nSummary of GWR coefficient estimates at data points:\n                   Min.    1st Qu.     Median    3rd Qu.       Max.   Global\nX.Intercept. -1574.4092   -53.8875    88.4952   472.7281  3092.1463 534.4908\nlmhhinc       -151.0306    -7.0538     3.2205    22.3099   120.2752   2.4616\nlpop           -76.6700     1.1576     7.2067    20.4788   109.5747  -1.3441\npnhblk        -124.9781    -2.0948    44.5163   100.0885   490.8729  21.1576\npunemp        -627.4200  -150.5909   -17.8892    69.6271   752.1506  -5.0966\npvac         -1329.2456     2.5473   165.4452   343.9353  1108.9033 371.6993\nph70         -1028.8902  -161.7810   -43.4011    -8.2491   144.6265 -79.6910\nlmhval        -178.5925   -70.3725   -26.7389    -3.7657    89.1748 -45.6676\nphnew        -3747.6133  -484.6545    54.6557   734.6134  6434.5605  17.9575\nphisp         -313.3416   -24.9975     4.8295   117.2090  1533.6438 -56.3076\nNumber of data points: 376 \nEffective number of parameters (residual: 2traceS - traceS'S): 220.8092 \nEffective degrees of freedom (residual: 2traceS - traceS'S): 155.1908 \nSigma (residual: 2traceS - traceS'S): 59.06332 \nEffective number of parameters (model: traceS): 178.5045 \nEffective degrees of freedom (model: traceS): 197.4955 \nSigma (model: traceS): 52.3567 \nSigma (ML): 37.94521 \nAICc (GWR p. 61, eq 2.33; p. 96, eq. 4.21): 4491.91 \nAIC (GWR p. 96, eq. 4.22): 3979.926 \nResidual sum of squares: 541379.3 \nQuasi-global R2: 0.81575 \n```\n:::\n:::\n\n\nThe default weighting function is the Gaussian function, which we can change to a bi-square function through the gweight argument. We have to specify this function in both estimating the optimal bandwidth and running GWR.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.b2<-gwr.sel(usarea ~ lmhhinc   + lpop + pnhblk + punemp + pvac  + ph70 + lmhval + \n     phnew + phisp, data = philly.sp, gweight = gwr.bisquare)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 14224.76 CV score: 1797387 \nBandwidth: 22993.17 CV score: 1840913 \nBandwidth: 8805.59 CV score: 1634064 \nBandwidth: 5456.356 CV score: 1578492 \nBandwidth: 1760.637 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 4044.717 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 6735.649 CV score: 1585951 \nBandwidth: 5535.278 CV score: 1581610 \nBandwidth: 4917.158 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5250.4 CV score: 1569337 \nBandwidth: 5123.113 CV score: 1563084 \nBandwidth: 5044.445 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5171.732 CV score: 1565614 \nBandwidth: 5093.064 CV score: 1561374 \nBandwidth: 5074.493 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5104.542 CV score: 1562042 \nBandwidth: 5085.971 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5097.448 CV score: 1561631 \nBandwidth: 5090.355 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5094.739 CV score: 1561473 \nBandwidth: 5092.029 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5093.704 CV score: 1561412 \nBandwidth: 5092.669 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5093.309 CV score: 1561389 \nBandwidth: 5092.913 CV score: 1561365 \nBandwidth: 5092.82 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5092.971 CV score: 1561369 \nBandwidth: 5092.878 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5092.935 CV score: 1561367 \nBandwidth: 5092.9 CV score: 1561365 \nBandwidth: 5092.891 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5092.905 CV score: 1561365 \nBandwidth: 5092.897 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5092.902 CV score: 1561365 \nBandwidth: 5092.899 CV score: 1561365 \nBandwidth: 5092.898 CV score: 1561364 \nBandwidth: 5092.897 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5092.898 CV score: 1561365 \nBandwidth: 5092.898 CV score: 1561364 \nBandwidth: 5092.898 CV score: NA \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in optimize(gwr.cv.f, lower = beta1, upper = beta2, maximum = FALSE, :\nNA/Inf replaced by maximum positive value\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nBandwidth: 5092.898 CV score: 1561364 \n```\n:::\n\n```{.r .cell-code}\ngwr.fit2<-gwr(usarea ~ lmhhinc   + lpop + pnhblk + punemp + pvac  + ph70 + lmhval + \n     phnew + phisp, data = philly.sp, bandwidth = gwr.b2, gweight = gwr.bisquare, se.fit=T, \n     hatmatrix=T)\ngwr.b2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5092.898\n```\n:::\n\n```{.r .cell-code}\ngwr.fit2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\ngwr(formula = usarea ~ lmhhinc + lpop + pnhblk + punemp + pvac + \n    ph70 + lmhval + phnew + phisp, data = philly.sp, bandwidth = gwr.b2, \n    gweight = gwr.bisquare, hatmatrix = T, se.fit = T)\nKernel function: gwr.bisquare \nFixed bandwidth: 5092.898 \nSummary of GWR coefficient estimates at data points:\n                   Min.    1st Qu.     Median    3rd Qu.       Max.   Global\nX.Intercept.  -649.3890    -5.7699   134.6249   512.9574  2336.5957 534.4908\nlmhhinc       -180.3145    -4.4545     1.7487    13.7554    68.2914   2.4616\nlpop           -49.1608     1.2314     6.3430    19.0823    69.7005  -1.3441\npnhblk        -106.4233     1.3658    41.0256    96.5291   285.2134  21.1576\npunemp        -397.5988  -143.8982    -6.2685    57.4553   729.4700  -5.0966\npvac          -757.5534     8.8245   209.8576   370.7793   650.3669 371.6993\nph70          -643.0070  -207.9799   -66.3040   -19.8028   142.9682 -79.6910\nlmhval        -150.2726   -69.5496   -34.8198    -6.7118   107.7625 -45.6676\nphnew        -1844.6086  -418.1211    19.6153   509.9117  7421.2055  17.9575\nphisp         -221.0604   -26.5670    -7.5865    84.2566  1418.3152 -56.3076\nNumber of data points: 376 \nEffective number of parameters (residual: 2traceS - traceS'S): 132.4964 \nEffective degrees of freedom (residual: 2traceS - traceS'S): 243.5036 \nSigma (residual: 2traceS - traceS'S): 62.2312 \nEffective number of parameters (model: traceS): 107.6713 \nEffective degrees of freedom (model: traceS): 268.3287 \nSigma (model: traceS): 59.2826 \nSigma (ML): 50.0803 \nAICc (GWR p. 61, eq 2.33; p. 96, eq. 4.21): 4316.932 \nAIC (GWR p. 96, eq. 4.22): 4117.761 \nResidual sum of squares: 943021.6 \nQuasi-global R2: 0.6790573 \n```\n:::\n:::\n\n\n### 4.2 Fixed or Adaptive Kernel\n\nThe GWR models we ran above yielded a **fixed distance** to search for neighbors to include in the local regression. But there are places in our data where tracts are more densely occurring. This means that in some areas, specifically in downtown Philadelphia, you'll include a larger number of neighboring tracts in the local regression compared to other areas, such as large tracts on the periphery of the city's boundaries. In this case, an adaptive kernel is suitable.\n\nIn order to specify an adaptive kernel, specify `adapt = TRUE` when finding the optimal bandwidth using `gwr.sel()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.b3<-gwr.sel(usarea ~ lmhhinc   + lpop + pnhblk + punemp + pvac  + ph70 + \n                  lmhval + phnew + phisp, data = philly.sp, adapt = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdaptive q: 0.381966 CV score: 1785033 \nAdaptive q: 0.618034 CV score: 1814714 \nAdaptive q: 0.236068 CV score: 1733969 \nAdaptive q: 0.145898 CV score: 1650907 \nAdaptive q: 0.09016994 CV score: 1565518 \nAdaptive q: 0.05572809 CV score: 1471615 \nAdaptive q: 0.03444185 CV score: 1401939 \nAdaptive q: 0.02128624 CV score: 1384273 \nAdaptive q: 0.01588534 CV score: 1431365 \nAdaptive q: 0.02662582 CV score: 1380970 \nAdaptive q: 0.02518866 CV score: 1380056 \nAdaptive q: 0.02491844 CV score: 1380031 \nAdaptive q: 0.02487775 CV score: 1380032 \nAdaptive q: 0.02495914 CV score: 1380032 \nAdaptive q: 0.02491844 CV score: 1380031 \n```\n:::\n\n```{.r .cell-code}\ngwr.b3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.02491844\n```\n:::\n:::\n\n\nThis value is the proportion of all cases which the weighting function will search, and include this fraction of observations in a model for each tract. The bandwidth distance will change according to the spatial density of features in the input feature class. The bandwidth becomes a function of the number of nearest neighbors such that each local estimation is based on the same number of features. Instead of a specific distance, the number of neighbors used for the analysis is reported.\n\nPlug the bandwidth into the function `gwr()`, which runs the GWR model, using the argument `adapt`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.fit3<-gwr(usarea ~ lmhhinc   + lpop + pnhblk + punemp + pvac  + ph70 + lmhval + \n     phnew + phisp, data = philly.sp, adapt=gwr.b3, se.fit=T, hatmatrix=T)\ngwr.fit3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCall:\ngwr(formula = usarea ~ lmhhinc + lpop + pnhblk + punemp + pvac + \n    ph70 + lmhval + phnew + phisp, data = philly.sp, adapt = gwr.b3, \n    hatmatrix = T, se.fit = T)\nKernel function: gwr.Gauss \nAdaptive quantile: 0.02491844 (about 9 of 376 data points)\nSummary of GWR coefficient estimates at data points:\n                    Min.     1st Qu.      Median     3rd Qu.        Max.\nX.Intercept. -1413.25718     2.04814   150.67770   593.38119  2856.09861\nlmhhinc        -77.30238    -6.62505     2.08877    20.59832   121.03243\nlpop           -71.53993     0.32328     6.55222    19.42020    93.59455\npnhblk        -139.33868    -0.35274    39.43998   102.07286   462.87992\npunemp        -592.27650  -109.64202    -3.93096    63.56270   623.38186\npvac         -1410.12965    11.95427   193.34738   350.39251  1047.77143\nph70          -975.65611  -190.62161   -67.38336   -13.17506   137.47857\nlmhval        -185.48730   -73.39044   -36.70912    -7.56967    48.91389\nphnew        -2570.54553  -577.37945    29.21937   654.40082  4045.23829\nphisp         -182.91660   -29.72723    -7.23980    65.71058   771.29484\n               Global\nX.Intercept. 534.4908\nlmhhinc        2.4616\nlpop          -1.3441\npnhblk        21.1576\npunemp        -5.0966\npvac         371.6993\nph70         -79.6910\nlmhval       -45.6676\nphnew         17.9575\nphisp        -56.3076\nNumber of data points: 376 \nEffective number of parameters (residual: 2traceS - traceS'S): 177.8408 \nEffective degrees of freedom (residual: 2traceS - traceS'S): 198.1592 \nSigma (residual: 2traceS - traceS'S): 54.21695 \nEffective number of parameters (model: traceS): 135.2358 \nEffective degrees of freedom (model: traceS): 240.7642 \nSigma (model: traceS): 49.18654 \nSigma (ML): 39.35938 \nAICc (GWR p. 61, eq 2.33; p. 96, eq. 4.21): 4258.02 \nAIC (GWR p. 96, eq. 4.22): 3964.174 \nResidual sum of squares: 582484.4 \nQuasi-global R2: 0.8017605 \n```\n:::\n:::\n\n\n## 5.0 Presenting GWR Results\n\nWhen presenting results of a GWR, you want to first show the distribution of coefficients for each variable. You'll also want to present the estimates of the global model. Typing in gwr.fit3 in R gives you this information, specifically the minimum, 25th percentile, median, 75th percentile, and maximum values of each variable's coefficients, along with the global regression coefficients and measures of model fit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nphilly$bwadapt <- gwr.fit3$bandwidth\n```\n:::\n\n\nSDF is the spatial polygons data frame containing the 376 regression model estimates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(gwr.fit3$SDF)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"sum.w\"               \"X.Intercept.\"        \"lmhhinc\"            \n [4] \"lpop\"                \"pnhblk\"              \"punemp\"             \n [7] \"pvac\"                \"ph70\"                \"lmhval\"             \n[10] \"phnew\"               \"phisp\"               \"X.Intercept._se\"    \n[13] \"lmhhinc_se\"          \"lpop_se\"             \"pnhblk_se\"          \n[16] \"punemp_se\"           \"pvac_se\"             \"ph70_se\"            \n[19] \"lmhval_se\"           \"phnew_se\"            \"phisp_se\"           \n[22] \"gwr.e\"               \"pred\"                \"pred.se\"            \n[25] \"localR2\"             \"X.Intercept._se_EDF\" \"lmhhinc_se_EDF\"     \n[28] \"lpop_se_EDF\"         \"pnhblk_se_EDF\"       \"punemp_se_EDF\"      \n[31] \"pvac_se_EDF\"         \"ph70_se_EDF\"         \"lmhval_se_EDF\"      \n[34] \"phnew_se_EDF\"        \"phisp_se_EDF\"        \"pred.se.1\"          \n```\n:::\n:::\n\n\nThe variables X.Intercept. to phisp give the regression coefficients. X.Intercept.se to phisp_se give the coefficient standard errors.\n\nIn addition to mapping coefficient sizes, you should also map whether these coefficients are statistically significant. Unfortunately, R doesn't have that information neatly compiled for you. But, you can use the coefficient size and standard error to get a t-statistic, which you can then map onto a t distribution to find the pvalue.\n\nTo do this, we will follow the steps below:\n\n-   extract the degrees of freedom from the `gwr` results object\n\n-   calculate the `t ratio` and save in the spatial dataframe\n\n-   calculate the `p value` using the `pt()` command. We'll have to multiply the value by 2 to get a two-tail *t* test.\n\n-   map the `p value`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndfree<-gwr.fit3$results$edf\nphilly$pnhblk.t <- gwr.fit3$SDF$pnhblk/gwr.fit3$SDF$pnhblk_se\nphilly$pnhblk.t.p<-2*pt(-abs(philly$pnhblk.t), dfree)\n\nbreaks <- c(0,0.01,0.05,0.1,1)\n```\n:::\n\n\n## 6.0 Multicollinearity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(cor(as.data.frame(gwr.fit3$SDF[,2:11]), use =\"complete.obs\"),2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             X.Intercept. lmhhinc  lpop pnhblk punemp  pvac  ph70 lmhval phnew\nX.Intercept.         1.00   -0.38 -0.36  -0.07  -0.45 -0.59 -0.44  -0.76  0.32\nlmhhinc             -0.38    1.00 -0.12   0.48   0.44  0.12 -0.02  -0.20 -0.32\nlpop                -0.36   -0.12  1.00  -0.15   0.26  0.79  0.14   0.09  0.04\npnhblk              -0.07    0.48 -0.15   1.00  -0.20 -0.16 -0.56  -0.23 -0.39\npunemp              -0.45    0.44  0.26  -0.20   1.00  0.63  0.48   0.10  0.02\npvac                -0.59    0.12  0.79  -0.16   0.63  1.00  0.41   0.27 -0.15\nph70                -0.44   -0.02  0.14  -0.56   0.48  0.41  1.00   0.48  0.00\nlmhval              -0.76   -0.20  0.09  -0.23   0.10  0.27  0.48   1.00 -0.17\nphnew                0.32   -0.32  0.04  -0.39   0.02 -0.15  0.00  -0.17  1.00\nphisp               -0.11    0.12  0.04   0.17  -0.03 -0.02 -0.34   0.02  0.05\n             phisp\nX.Intercept. -0.11\nlmhhinc       0.12\nlpop          0.04\npnhblk        0.17\npunemp       -0.03\npvac         -0.02\nph70         -0.34\nlmhval        0.02\nphnew         0.05\nphisp         1.00\n```\n:::\n\n```{.r .cell-code}\npairs(as(gwr.fit3$SDF, \"data.frame\")[,2:11], pch=\".\")\n```\n\n::: {.cell-output-display}\n![](gwr_test_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## 7.0 Model Fit\n\nOne way of comparing the \"fit\" of a GWR relative to an OLS or any other regression models is to compare AIC values. The GWR output offers three different ways to measure AIC.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr.fit3$results$AICh\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3964.174\n```\n:::\n\n```{.r .cell-code}\ngwr.fit3$results$AICc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4349.03\n```\n:::\n\n```{.r .cell-code}\ngwr.fit3$results$AICb\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4258.02\n```\n:::\n\n```{.r .cell-code}\nAIC(fit.ols)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4268.359\n```\n:::\n:::\n\n\nThe downside of the AIC is that it offers no inferential way of detecting whether differences are statistically different from one another.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBFC02.gwr.test(gwr.fit3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tBrunsdon, Fotheringham & Charlton (2002, pp. 91-2) ANOVA\n\ndata:  gwr.fit3\nF = 3.0349, df1 = 366.00, df2 = 198.16, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nSS OLS residuals SS GWR residuals \n       1767753.4         582484.4 \n```\n:::\n\n```{.r .cell-code}\nBFC99.gwr.test(gwr.fit3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tBrunsdon, Fotheringham & Charlton (1999) ANOVA\n\ndata:  gwr.fit3\nF = 2.4024, df1 = 333.76, df2 = 260.43, p-value = 2.142e-13\nalternative hypothesis: greater\nsample estimates:\nSS GWR improvement   SS GWR residuals \n         1185269.0           582484.4 \n```\n:::\n\n```{.r .cell-code}\nLMZ.F1GWR.test(gwr.fit3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tLeung et al. (2000) F(1) test\n\ndata:  gwr.fit3\nF = 0.6086, df1 = 260.43, df2 = 366.00, p-value = 1.108e-05\nalternative hypothesis: less\nsample estimates:\nSS OLS residuals SS GWR residuals \n       1767753.4         582484.4 \n```\n:::\n\n```{.r .cell-code}\nLMZ.F2GWR.test(gwr.fit3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tLeung et al. (2000) F(2) test\n\ndata:  gwr.fit3\nF = 1.4621, df1 = 233.86, df2 = 366.00, p-value = 0.0005763\nalternative hypothesis: greater\nsample estimates:\n  SS OLS residuals SS GWR improvement \n           1767753            1185269 \n```\n:::\n\n```{.r .cell-code}\nLMZ.F3GWR.test(gwr.fit3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nLeung et al. (2000) F(3) test\n\n            F statistic Numerator d.f. Denominator d.f.     Pr(>)    \n(Intercept)     0.94419      122.59061           260.43 0.6369477    \nlmhhinc         0.57486      105.11265           260.43 0.9993521    \nlpop            0.83970      117.68318           260.43 0.8595358    \npnhblk          1.43484       89.33826           260.43 0.0151795 *  \npunemp          0.92026      119.99577           260.43 0.6949096    \npvac            2.94794      106.14539           260.43 1.055e-12 ***\nph70            1.69122      100.67109           260.43 0.0004901 ***\nlmhval          0.91483      116.24838           260.43 0.7054314    \nphnew           0.22495       11.59110           260.43 0.9966467    \nphisp           0.35611       40.49489           260.43 0.9999100    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\nThe first 4 tests compare overall model fit whereas the last test examines spatial variation in individual coefficients. All 4 overall model fit tests show that the GWR shows significant improvement in explanatory power over an OLS. The last model shows that the variables `pvac`, `phnblk`, and `ph70` indicate statistically significant spatial heterogeneity in its GWR coefficients. These results indicate that there is spatial heterogeneity in the relationships between our covariates and major build code violations. Look at the distribution of the GWR coefficients for `pvac`, `phnblk`, and `ph70` to see the range of variation between the local coefficients.\n",
    "supporting": [
      "gwr_test_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}