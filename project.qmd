---
title: "Project"
author:
  - name: Khant Min Naing
  - name: Mei Yi Victoria Grace Ann
date: 01-07-2024
date-modified: "last-modified"
categories:
  - R
  - sf
  - ggplot2
output:
  distill::distill_article:
    code_folding: false
    toc: true
    self_contained: false
---

## 1.0 Set Up {style="color: #603494;"}

In this section, we set up the necessary R packages for data processing and exploratory spatial data analysis. The following packages are downloaded.

-   [**sp**](https://cran.r-project.org/web/packages/sp/index.html)for handling and analysing spatial data, providing classes and methods for spatial data manipulation.

-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for importing, managing, and processing geospatial data, using simple features, enabling seamless integration with other tidyverse tools.

-   [**raster**](https://cran.r-project.org/web/packages/raster/index.html)for reading, writing, manipulating, analysing and modelling raster (gridded) spatial data.

-   [**elevatr**](https://cran.r-project.org/web/packages/elevatr/index.html)for extracting elevation data from various APIs and digital elevation models.

-   [**terra**](https://cran.r-project.org/web/packages/terra/index.html)for spatial data analysis with vector (points, lines, polygons) and raster (grid) data

-   [**tidyr**](https://cran.r-project.org/web/packages/tidyr/index.html) for creating tidy data, where each column is a variable, each row is an observation, and each cell contains a single value.

-   [**dplyr**](https://cran.r-project.org/web/packages/dplyr/index.html)fordata manipulation and wrangling

-   [**ggplot2**](https://cran.r-project.org/web/packages/ggplot2/index.html)for visualizing data into static and interactive graphics, based on [The Grammar of Graphics](https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448/ref=as_li_ss_tl) paradigm.

-   [**cowplot**](https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html)for creating complex and publication-quality multi-panel plots with added features and themes, an extension to ggplot2

-   [**classInt**](https://cran.r-project.org/web/packages/classInt/index.html)for classifying numeric data into intervals or classes, for mapping or other graphics purposes

-   [**RColorBrewer**](https://cran.r-project.org/web/packages/RColorBrewer/index.html)for creating visually appealing plots, particularly useful for thematic mapping.

-   [**paletteer**](https://cran.r-project.org/web/packages/paletteer/index.html)for accessing a diverse collection of color palettes for data visualization.

```{r, code_folding=FALSE, results='hide', message=FALSE, warning=FALSE}
library(sp)
library(raster) 
library(elevatr)
library(sf)
library(RColorBrewer)
library(classInt)
library(ggplot2)
library(terra)
library(tidyr)
library(paletteer)
library(cowplot)
library(dplyr)
```

## 2.0 Import {style="color: #603494;"}

In this section, I will import the necessary datasets (both spatial and geospatial) into R environment.

```{r, code_folding=FALSE}
valtellina <- read_sf(dsn = "./data/vector", layer = "valtellina")
precipitation <-raster("data/raster/avgprecipitation_mm.tif")
```

## 3.0 Study Area {style="color: #603494;"}

Before creating thematic maps for each landslide parameter, a map is created to plot the study area of this project, Valtellina Valley in Italy using `ggplot` package.

```{r}
ggplot(data = valtellina) +
  geom_sf()+
  coord_sf(expand=FALSE)+
  labs(x='Longitude',y='Latitude',
       title="Study Area",
       subtitle='Valtellina Valley, Italy',
       caption='Source: Zindi') +
  cowplot::theme_cowplot()+
  theme(panel.grid.major = element_line(color = gray(.5),
                                        linetype = 'dashed',
                                        linewidth = 0.5),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill=NA,color = 'black'),
        panel.ontop = TRUE,
        axis.title.x = element_text(size = 12), 
        axis.title.y = element_text(size = 12),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10))
```

## 4.0 Fixing CRS References {style="color: #603494;"}

Map projection is an important property of a geospatial data. In order to perform geoprocessing using geospatial data, we need to ensure that data are projected using the appropriate and standard coordinate system. For this project, we use EPSG:32632 (WGS 84 / UTM zone 32N) for all the datasets.

```{r, code_folding=FALSE,results='hide'}

valtellina <- st_set_crs(valtellina,32632)
precipitation <- projectRaster(precipitation, crs = crs(valtellina))
```

## 5.0 Create Database {style="color: #603494;"}

Before plotting the thematic maps with ggplot2, raster datasets are converted into data frames.

```{r, code_folding=FALSE}

precipitation_df <- as.data.frame(precipitation,xy=TRUE)%>%drop_na()
tail(precipitation_df)
```

## 6.0 Plot with ggplot2 {style="color: #603494;"}

[`geom_raster()`](https://ggplot2.tidyverse.org/reference/geom_tile.html) allows for visualizing `tiles` (such as raster).

[`geom_sf()`](https://ggplot2.tidyverse.org/reference/ggsf.html) allows for visualizing `sf` objects. Conveniently, [`geom_sf()`](https://ggplot2.tidyverse.org/reference/ggsf.html) automatically detects the geometry type of spatial objects stored in `sf` and draw maps accordingly.

```{r, code_folding=FALSE}

ggplot()+
  geom_raster(aes(x=x,y=y,fill=avgprecipitation_mm),data=precipitation_df)+
  geom_sf(fill='transparent',data=valtellina)+
  scale_fill_gradientn('avg precipitation \n(mm)', colours=c("#eff635","#e4c838","#99bf3e","#61adab","#5071ea","#4225df","#3310a2"))+
  coord_sf(expand=FALSE)+
  labs(x='Longitude',y='Latitude',
       title="Average Precipitation Map",
       subtitle='Valtellina Valley, Italy',
       caption='Source: Zindi') +
  cowplot::theme_cowplot()+
  theme(panel.grid.major = element_line(color = gray(.5),
                                        linetype = 'dashed',
                                        linewidth = 0.5),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill=NA,color = 'black'),
        panel.ontop = TRUE,
        axis.title.x = element_text(size = 10), 
        axis.title.y = element_text(size = 10),
        axis.text.x = element_text(size = 8),
        axis.text.y = element_text(size = 8),
        legend.title = element_text(size = 10))
```
